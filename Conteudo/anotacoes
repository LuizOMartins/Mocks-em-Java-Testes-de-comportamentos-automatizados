Test Data Builder =  criador de dados para testes.

Exemplo de fluxo:  realizar um teste onde é feito um insert no banco, mas a cada teste o total de registro aumento, se comparar o total do teste com a quantidade de registro, sempre vai dar diferente.

Lista em memoria é mais rapido que em banco de dados.
-> Simular banco de dados na mão é muito trabalhoso.
**-> Com base Nisso  foi criado um DAOFAlso.java para ser realizado os testes de mock.

Mockito:
- ajuda a criar objetos falsos.
- mock: classe falsa.

Exemplo de Mock:
when(daoFalso.correntes()).thenReturn(new ArrayList<Leilao>());

->Facil verificação se um metodo foi envocado.
-> verify() 
-> quantidade:  times()


______________________________________________________________

Exceção:

Simulando envio de e-mail:

Interface: carteiro.
**receber no construtor, mais flexibilidade.

obs: teste nao podem ficar quebrados.

->simulando que o sistema funciona mesmo quando o banco esta fora do Ar.
Lançan Exceção com mockito:
  doThrow(new RuntimeException()).when(daoFalso).atualiza(leilao2);


______________________________________________________________


Capturando argumentos recebidos pelo Mock:

ArgumentCaptor.
- Usado para pegar o valor do arumento passado, no exemplo foi utilizado par nao pecizar ter alteração nas classe, pois se tivesse teria uma alteração de Dominio.

ArgumentCaptor<ABC> argumento = ArgumentCaptor.forClass(ABC.class);



______________________________________________________________


Isolando para Testar:

-> Isolando captura do dia atual, para nao ter problema com o teste gerado em algum dia da semana, pois esta sendo utiliza Calendar.getInstance().

-> pensar sempre em facilitar os testes.
-> aumentar as abostrações.